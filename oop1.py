from abc import ABC, abstractmethod

### 1. Наслідування (базовий клас + похідні) ###
class Тварина(ABC):  # Абстрактний базовий клас
    @abstractmethod
    def звук(self):  # Абстрактний метод
        pass
    
    def опис(self):   # Звичайний метод
        return "Це тварина"

### 2. Інкапсуляція (приховані дані + методи доступу) ###
class Собака(Тварина):
    def __init__(self, імя):
        self.__імя = імя  # Приховане поле (два підкреслення)
    
    # Реалізація абстрактного методу
    def звук(self):
        return "Гав!"
    
    # Методи для роботи з прихованим полем
    def отримати_імя(self):
        return self.__імя
    
    def змінити_імя(self, нове_імя):
        if len(нове_імя) > 0:
            self.__імя = нове_імя

class Кіт(Тварина):
    def __init__(self, імя):
        self.__імя = імя
    
    def звук(self):
        return "Мяу!"
    
    def отримати_імя(self):
        return self.__імя

### 3. Поліморфізм (однакова функція для різних об'єктів) ###
тварини = [Собака("Спайк"), Кіт("Кіт")]

for тварина in тварини:
    print(f"{тварина.опис()}: {тварина.звук()} (Ім'я: {тварина.отримати_імя()})")